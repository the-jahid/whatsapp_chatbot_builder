generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
//  ENUMS
// ===================================

/// Represents the different stages of a sales lead.
enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  UNQUALIFIED
  WON
  LOST
}

/// Identifies if a message was sent by a person or the AI.
enum SenderType {
  HUMAN
  AI
}

/// Defines the type of memory the AI agent uses for conversations.
enum MemoryType {
  NONE
  BUFFER
  SUMMARY
  KNOWLEDGE_BASE
}

/// Tracks the delivery status of an email.
enum EmailStatus {
  SENT
  DELIVERED
  OPENED
  FAILED
}

/// Represents the supported calendar providers for integration.
enum CalendarProvider {
  GOOGLE
  OUTLOOK
}

/// Represents the days of the week for scheduling recurring availability.
enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

/// Defines the status of a booked appointment.
enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// ===================================
//  MODELS
// ===================================

/// Represents a system user who owns and manages agents.
model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  oauthId             String               @unique
  username            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  agents              Agent[]
  calendarConnections CalendarConnection[]
}

model Agent {
  id                    String                    @id @default(uuid())
  name                  String
  prompt                String?
  apiKey                String?                   @unique
  isActive              Boolean                   @default(false)
  isLeadsActive         Boolean                   @default(false)
  isEmailActive         Boolean                   @default(false)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  userId                String
  memoryType            MemoryType                @default(BUFFER)
  isKnowledgebaseActive Boolean                   @default(false)
  isBookingActive       Boolean                   @default(false)
  user                  User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendarAssignments   AgentCalendarAssignment[]
  appointments          Appointment[]
  appointmentLeadItems  AppointmentLeadItem[]
  bookingSettings       BookingSettings?
  conversations         Conversation[]
  Email                 Email[]
  knowledgeBase         KnowledgeBase?
  leads                 Lead[]
  leadItems             LeadItem[]
  weeklyAvailabilities  WeeklyAvailability[]

  // Calendar assignments (User-level connections mapped to Agents)
  calendarAssignments   AgentCalendarAssignment[]

  // Appointment intake configuration (simple, LeadItem-like)
  appointmentLeadItems  AppointmentLeadItem[]

  @@index([userId, isActive])
}


model Whatsapp {
  id           String   @id @default(uuid())
  whatsappJid  String?
  whatsappName String?
  sessionData  Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  agentId      String   @unique
  agent        Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
}


model OutboundCampaign {
  id                   String                   @id @default(uuid())
  name                 String
  type                 OutboundCampaignType     @default(SINGLE)
  status               OutboundCampaignStatus   @default(DRAFT)
  agentEnabled         Boolean                  @default(true)
  scheduledAt          DateTime?
  startedAt            DateTime?
  completedAt          DateTime?
  cancelledAt          DateTime?
  agentId              String
  agent                Agent                    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  // â†´ One OutboundCampaign â†’ Many leadCustomFieldInatake
  leadCustomFieldIntakes leadCustomFieldInatake[]

  // â†´ One OutboundCampaign â†’ Many OutboundLead
  outboundLeads        OutboundLead[]

  totalMessages        Int                      @default(0)
  leadsCount           Int                      @default(0)
  answeredLeadsCount   Int                      @default(0)
  lastActivityAt       DateTime?
  config               Json?
  stats                Json?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt

  @@map("outboundCampaigns")
  @@index([agentId, agentEnabled, status, scheduledAt, lastActivityAt])
  @@index([createdAt])
}

model leadCustomFieldInatake {
  id                  String            @id @default(uuid())
  name                String            // machine key, e.g. "referenceId"

  // â†´ Belongs to one OutboundCampaign
  outboundCampaignId  String
  outboundCampaign    OutboundCampaign  @relation(fields: [outboundCampaignId], references: [id], onDelete: Cascade)

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("lead_custom_field_inatake")
  @@index([outboundCampaignId])
  @@unique([outboundCampaignId, name])  // unique per campaign
}

model OutboundLead {
  id               String             @id @default(uuid())
  phoneNumber      String
  firstName        String?
  timeZone         String             @default("UTC") // e.g., "W. Europe Standard Time" or IANA
  status           OutboundLeadStatus @default(QUEUED)

  // Attempts (to render "3/3" etc.)
  attemptsMade     Int                @default(0)
  maxAttempts      Int                @default(3)
  lastAttemptAt    DateTime?

  // ðŸ”— Belongs to one OutboundCampaign
  outboundCampaignId String
  outboundCampaign    OutboundCampaign @relation(fields: [outboundCampaignId], references: [id], onDelete: Cascade)

  // Dynamic, user-defined fields (free-form JSON)
  customFields     Json?              @db.JsonB



  // Bookkeeping
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("outbound_leads")
  @@index([createdAt])
  @@index([status])
  @@index([phoneNumber])
  @@index([outboundCampaignId, status, createdAt])
}

// ---------------------------------------------------Outbound_section_ends -----------------


model KnowledgeBase {
  id                 String                  @id @default(uuid())
  freeText           String?
  companyName        String?
  companyDescription String?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  agentId            String                  @unique
  agent              Agent                   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  documents          KnowledgeBaseDocument[]
}

model KnowledgeBaseDocument {
  id              String        @id @default(uuid())
  title           String
  content         String
  tags            String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  knowledgeBaseId String
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@index([knowledgeBaseId, createdAt])
}

model BookingSettings {
  id                  String   @id @default(uuid())
  appointmentSlot     Int      @default(15)
  allowSameDayBooking Boolean  @default(true)
  enableNotifications Boolean  @default(true)
  notificationEmails  String[]
  agentId             String   @unique
  timezone            String   @default("UTC")
  agent               Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model CalendarConnection {
  id                   String                    @id @default(uuid())
  provider             CalendarProvider
  accountEmail         String
  refreshToken         String?
  isPrimary            Boolean                   @default(false)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  accessToken          String?
  accessTokenExpiresAt DateTime?
  calendarId           String?
  userId               String
  agentAssignments     AgentCalendarAssignment[]
  user                 User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountEmail])
  @@index([userId, isPrimary])
}

model AgentCalendarAssignment {
  agentId              String
  calendarConnectionId String
  assignedAt           DateTime           @default(now())
  agent                Agent              @relation(fields: [agentId], references: [id], onDelete: Cascade)
  calendarConnection   CalendarConnection @relation(fields: [calendarConnectionId], references: [id], onDelete: Cascade)

  @@id([agentId, calendarConnectionId])
}

model WeeklyAvailability {
  id        String    @id @default(uuid())
  dayOfWeek DayOfWeek
  startTime String
  endTime   String
  agentId   String
  agent     Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  

  @@unique([agentId, dayOfWeek, startTime, endTime])
}

model Appointment {
  id        String            @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(PENDING)
  location  String?
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  agentId   String
  timezone  String            @default("UTC")
  agent     Agent             @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, startTime])
}

model AppointmentLeadItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agentId     String
  agent       Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, name])
  @@index([agentId, createdAt])
}

model LeadItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agentId     String
  agent       Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, name])
}

model Lead {
  id                 String              @id @default(uuid())
  status             LeadStatus          @default(NEW)
  source             String?
  data               Json
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  agentId            String

  agent              Agent               @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, status, createdAt])
}

model Conversation {
  id         String     @id @default(uuid())
  senderJid  String
  message    String
  senderType SenderType
  createdAt  DateTime   @default(now())
  agentId    String
  metadata   Json?
  agent      Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, senderJid, createdAt])
}

model Email {
  id                String      @id @default(uuid())
  recipient         String
  subject           String
  body              String
  sentAt            DateTime    @default(now())
  agentId           String
  status            EmailStatus @default(SENT)
  clickedAt         DateTime?
  lastError         String?
  openedAt          DateTime?
  providerMessageId String?
  agent             Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, sentAt])
  @@index([status])
}





enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  UNQUALIFIED
  WON
  LOST
}

enum SenderType {
  HUMAN
  AI
}

enum MemoryType {
  NONE
  BUFFER
  SUMMARY
  KNOWLEDGE_BASE
}

enum EmailStatus {
  SENT
  DELIVERED
  OPENED
  FAILED
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum OutboundCampaignType {
  SINGLE
  BROADCAST
}

enum OutboundCampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  COMPLETED
  CANCELLED
}

enum OutboundMessageStatus {
  QUEUED
  SENT
  SERVER_ACK
  DELIVERED
  READ
  FAILED
  CANCELLED
}

enum OutboundMessageEventType {
  QUEUED
  SENT
  SERVER_ACK
  DELIVERED
  READ
  FAILED
  CANCELLED
}

/// Per-recipient progression status inside a campaign sequence
enum RecipientProgressStatus {
  ACTIVE
  COMPLETED
  STOPPED
}
