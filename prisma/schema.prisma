// ===================================
//  PRISMA SETUP
// ===================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
//  ENUMS
// ===================================

/// Represents the different stages of a sales lead.
enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  UNQUALIFIED
  WON
  LOST
}

/// Identifies if a message was sent by a person or the AI.
enum SenderType {
  HUMAN
  AI
}

/// Defines the type of memory the AI agent uses for conversations.
enum MemoryType {
  NONE
  BUFFER
  SUMMARY
  KNOWLEDGE_BASE
}

/// Tracks the delivery status of an email.
enum EmailStatus {
  SENT
  DELIVERED
  OPENED
  FAILED
}

/// Represents the supported calendar providers for integration.
enum CalendarProvider {
  GOOGLE
  OUTLOOK
}

/// Represents the days of the week for scheduling recurring availability.
enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

/// Defines the status of a booked appointment.
enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// ===================================
//  MODELS
// ===================================

/// Represents a system user who owns and manages agents.
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  oauthId   String   @unique // OAuth provider unique identifier (e.g., Clerk, Google)
  username  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relations ---
  agents              Agent[]
  calendarConnections CalendarConnection[]
}

/// The core model representing an AI agent. Each agent has its own configuration and data.
model Agent {
  id                    String     @id @default(uuid())
  name                  String
  prompt                String?    // Base system prompt / instruction
  apiKey                String?    @unique // Store encrypted at rest
  isActive              Boolean    @default(false)
  isLeadsActive         Boolean    @default(false) // Feature flag: lead management
  isEmailActive         Boolean    @default(false) // Feature flag: email
  isKnowledgebaseActive Boolean    @default(false) // Feature flag: knowledge base
  isBookingActive       Boolean    @default(false) // Feature flag: bookings
  memoryType            MemoryType @default(BUFFER)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  // --- Relationships ---
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  whatsapp              Whatsapp?
  knowledgeBase         KnowledgeBase?
  conversations         Conversation[]
  leads                 Lead[]
  leadItems             LeadItem[]
  Email                 Email[]
  appointments          Appointment[]

  // --- Booking Configuration ---
  bookingSettings       BookingSettings?
  weeklyAvailabilities  WeeklyAvailability[]

  // Calendar assignments (User-level connections mapped to Agents)
  calendarAssignments   AgentCalendarAssignment[]

  // Appointment intake configuration (simple, LeadItem-like)
  appointmentLeadItems  AppointmentLeadItem[]

  @@index([userId, isActive])
}

// -----------------------------------
//  Agent Configuration Models
// -----------------------------------

/// Stores the session and connection data for an agent's WhatsApp integration.
model Whatsapp {
  id           String   @id @default(uuid())
  whatsappJid  String?  // The WhatsApp User ID (JID)
  whatsappName String?
  sessionData  Json     @db.JsonB // Baileys session/auth payload (prefer JSONB for Postgres)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  agentId String @unique
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

/// Contains the custom knowledge for an agent to draw upon.
model KnowledgeBase {
  id                 String   @id @default(uuid())
  freeText           String?  @db.Text
  companyName        String?
  companyDescription String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // --- Relations ---
  agentId   String @unique
  agent     Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  documents KnowledgeBaseDocument[]
}

/// Individual documents/snippets for scalable knowledge bases.
model KnowledgeBaseDocument {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  tags      String[] // optional simple tagging
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  knowledgeBaseId String
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@index([knowledgeBaseId, createdAt])
}

// -----------------------------------
//  Appointment Booking Models
// -----------------------------------

/// Main model for an agent's booking configuration.
model BookingSettings {
  id                  String   @id @default(uuid())
  appointmentSlot     Int      @default(15) // minutes
  allowSameDayBooking Boolean  @default(true)
  enableNotifications Boolean  @default(true)
  notificationEmails  String[]

  /// Default IANA timezone used to generate/display availability (e.g., "Europe/Rome").
  timezone            String   @default("UTC")

  agentId String @unique
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

/// Stores connection details for an external calendar provider like Google Calendar.
/// Linked to the User; can be assigned to many Agents.
model CalendarConnection {
  id                   String           @id @default(uuid())
  provider             CalendarProvider
  accountEmail         String
  accessToken          String?
  accessTokenExpiresAt DateTime?
  refreshToken         String?
  calendarId           String?
  isPrimary            Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // --- Relations ---
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // M:N with Agent via join table
  agentAssignments AgentCalendarAssignment[]

  @@unique([userId, accountEmail])
  @@index([userId, isPrimary])
}

/// Join table to create a many-to-many relationship between Agent and CalendarConnection.
model AgentCalendarAssignment {
  agentId              String
  calendarConnectionId String
  assignedAt           DateTime @default(now())

  agent              Agent              @relation(fields: [agentId], references: [id], onDelete: Cascade)
  calendarConnection CalendarConnection @relation(fields: [calendarConnectionId], references: [id], onDelete: Cascade)

  @@id([agentId, calendarConnectionId])
}

/// Weekly recurring availability blocks per Agent.
/// startTime/endTime are "HH:mm" local times interpreted in the agent's booking timezone.
model WeeklyAvailability {
  id        String    @id @default(uuid())
  dayOfWeek DayOfWeek
  startTime String
  endTime   String

  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, dayOfWeek, startTime, endTime])
}

/// Represents a scheduled appointment (optionally linked to a lead).
model Appointment {
  id        String            @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(PENDING)
  location  String?
  notes     String?

  /// IANA timezone to render this appointment for the user (DST-safe, e.g., "Europe/Rome").
  timezone  String            @default("UTC")

  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // --- Relations ---
  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)



  @@index([agentId, startTime])
}

// -----------------------------------
//  Appointment Intake (simple, LeadItem-like)
// -----------------------------------

/// Items (questions/fields) to collect specifically for APPOINTMENT booking.
/// Kept separate from Lead/LeadItem as requested; minimal shape like LeadItem.
model AppointmentLeadItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // --- Relations ---
  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  

  @@unique([agentId, name])        // avoid duplicate item names per agent
  @@index([agentId, createdAt])
}


// -----------------------------------
//  Lead & Contact Models
// -----------------------------------

model LeadItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, name])
}

model Lead {
  id        String     @id @default(uuid())
  status    LeadStatus @default(NEW)
  source    String?
  data      Json
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, status, createdAt])
}

// -----------------------------------
//  Communication Models
// -----------------------------------

model Conversation {
  id         String     @id @default(uuid())
  senderJid  String
  message    String     @db.Text // long messages
  senderType SenderType
  metadata   Json?      // message ids, attachments, tool calls, etc.
  createdAt  DateTime   @default(now())

  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, senderJid, createdAt])
}

/// Outbound email records with richer tracking.
model Email {
  id                 String      @id @default(uuid())
  recipient          String
  subject            String
  body               String      @db.Text
  sentAt             DateTime    @default(now())
  status             EmailStatus @default(SENT)

  // Tracking/diagnostics
  openedAt           DateTime?
  clickedAt          DateTime?
  providerMessageId  String?     // e.g., SES/Sendgrid id
  lastError          String?     @db.Text

  // --- Relations ---
  agentId String
  agent   Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, sentAt])
  @@index([status])
}
