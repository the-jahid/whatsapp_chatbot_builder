generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ================================
 * ENUMS
 * ================================
 */
enum AIModel {
  CHATGPT
  GEMINI
  CLAUDE
}

enum OpenAIModel {
  gpt_3_5_turbo
  gpt_4
  gpt_4_1
  gpt_4_1_mini
  gpt_4_1_nano
  gpt_5
  gpt_5_mini
  gpt_5_nano
  gpt_5_thinking
  gpt_5_thinking_mini
  gpt_5_thinking_nano
  gpt_5_thinking_pro
  gpt_4_turbo
  gpt_4_turbo_16k
  gpt_4_turbo_32k
  gpt_4_vision
  gpt_4_vision_16k
  gpt_5_turbo
  gpt_5_turbo_16k
  gpt_5_turbo_32k
  gpt_5_vision
}




enum GeminiModel {
  gemini_1_0_nano_1
  gemini_1_0_nano_2
  gemini_1_0_pro
  gemini_1_0_ultra
  gemini_1_5_pro
  gemini_1_5_flash
  gemini_2_0_flash
  gemini_2_0_flash_lite
  gemini_2_0_flash_preview_image_generation
  gemini_2_0_flash_live_001
  gemini_2_5_pro
  gemini_2_5_flash
  gemini_2_5_flash_lite
}



enum ClaudeModel {
  claude_3_haiku
  claude_3_sonnet
  claude_3_opus
  claude_3_5_haiku
  claude_3_5_sonnet
  claude_3_5_sonnet_v2
  claude_3_7_sonnet
  claude_3_7_sonnet_thinking
  claude_4_opus
  claude_4_opus_4_1
  claude_4_sonnet
}


enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  UNQUALIFIED
  WON
  LOST
}

enum SenderType {
  HUMAN
  AI
}

enum MemoryType {
  NONE
  BUFFER
  SUMMARY
  KNOWLEDGE_BASE
}

enum EmailStatus {
  SENT
  DELIVERED
  OPENED
  FAILED
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum OutboundCampaignType {
  SINGLE
  BROADCAST
}

enum OutboundCampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  COMPLETED
  CANCELLED
}

/**
 * SUPERTSET to avoid data loss. Keep old values to let `db push` succeed.
 * (Optional cleanup: remap data and later remove deprecated values.)
 */
enum OutboundLeadStatus {
  // New/kept
  QUEUED
  IN_PROGRESS
  ANSWERED
  COMPLETED
  FAILED
  PAUSED

  // Deprecated (still present in DB)
  NEED_RETRY
  MESSAGE_SUCCESSFUL
  INVALID_NUMBER
  BLOCKED
  UNSUBSCRIBED
  DNC
}

enum OutboundMessageStatus {
  QUEUED
  SENT
  SERVER_ACK
  DELIVERED
  READ
  FAILED
  CANCELLED
}

enum OutboundMessageEventType {
  QUEUED
  SENT
  SERVER_ACK
  DELIVERED
  READ
  FAILED
  CANCELLED
}

enum RecipientProgressStatus {
  ACTIVE
  COMPLETED
  STOPPED
}

/**
 * WhatsApp template lifecycle for management
 */
enum TemplateStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

/**
 * ================================
 * MODELS
 * ================================
 */

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  oauthId   String   @unique
  username  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agents              Agent[]
  calendarConnections CalendarConnection[]
}

model Agent {
  id                    String     @id @default(uuid())
  name                  String
  prompt                String?
  apiKey                String?    @unique  // User-provided API key
  isActive              Boolean    @default(false)
  isLeadsActive         Boolean    @default(false)
  isEmailActive         Boolean    @default(false)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  userId                String
  memoryType            MemoryType @default(BUFFER)
  isKnowledgebaseActive Boolean    @default(false)
  isBookingActive       Boolean    @default(false)
  modelType             AIModel    @default(CHATGPT) // New field for model type
  useOwnApiKey          Boolean    @default(false)  // New field to track if the user is using their own API key
  userProvidedApiKey    String?    // Optional field for user-provided API key (if useOwnApiKey is true)

  // Enums for selecting the AI model
  openAIModel           OpenAIModel?   // Enum for OpenAI models
  geminiModel           GeminiModel?   // Enum for Gemini models
  claudeModel           ClaudeModel?   // Enum for Claude models

  user                 User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendarAssignments  AgentCalendarAssignment[]
  appointments         Appointment[]
  appointmentLeadItems AppointmentLeadItem[]
  bookingSettings      BookingSettings?
  conversations        Conversation[]
  Email                Email[]
  knowledgeBase        KnowledgeBase?
  leads                Lead[]
  leadItems            LeadItem[]
  weeklyAvailabilities WeeklyAvailability[]

  whatsapp         Whatsapp?
  OutboundCampaign OutboundCampaign[]

  @@index([userId, isActive])
}



model Whatsapp {
  id           String   @id @default(uuid())
  whatsappJid  String?
  whatsappName String?
  sessionData  Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  agentId      String   @unique

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model OutboundCampaign {
  id           String                 @id @default(uuid())
  name         String
  type         OutboundCampaignType   @default(SINGLE)
  status       OutboundCampaignStatus @default(DRAFT)
  agentEnabled Boolean                @default(true)
  scheduledAt  DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  cancelledAt  DateTime?
  agentId      String

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  // One OutboundCampaign → Many leadCustomFieldInatake
  leadCustomFieldIntakes leadCustomFieldInatake[]

  // One OutboundCampaign → Many OutboundLead
  outboundLeads OutboundLead[]

  // One OutboundCampaign → Many Templates (new)
  templates        OutboundCampaignTemplate[]
  assignedTemplate String?

  totalMessages      Int       @default(0)
  leadsCount         Int       @default(0)
  answeredLeadsCount Int       @default(0)
  lastActivityAt     DateTime?
  config             Json?
  stats              Json?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([agentId, agentEnabled, status, scheduledAt, lastActivityAt])
  @@index([createdAt])
  @@map("outboundCampaigns")
}

/**
 * NEW: Per-campaign WhatsApp message templates.
 * - `name` unique within campaign
 * - `body` supports placeholders like {{firstName}}; list them in `variables`
 * - `locale` optional (e.g., "en", "en_US")
 * - `isDefault` to mark primary template per campaign
 */
model OutboundCampaignTemplate {
  id        String         @id @default(uuid())
  name      String
  body      String
  variables String[]
  locale    String?
  status    TemplateStatus @default(DRAFT)
  isDefault Boolean        @default(false)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  outboundCampaignId String
  outboundCampaign   OutboundCampaign @relation(fields: [outboundCampaignId], references: [id], onDelete: Cascade)

  @@unique([outboundCampaignId, name]) // unique template name per campaign
  @@index([outboundCampaignId, isDefault, status])
  @@map("outbound_campaign_templates")
}

model leadCustomFieldInatake {
  id   String @id @default(uuid())
  name String

  outboundCampaignId String
  outboundCampaign   OutboundCampaign @relation(fields: [outboundCampaignId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([outboundCampaignId, name])
  @@index([outboundCampaignId])
  @@map("lead_custom_field_inatake")
}

model OutboundLead {
  id          String             @id @default(uuid())
  phoneNumber String
  firstName   String?
  timeZone    String             @default("UTC")
  status      OutboundLeadStatus @default(QUEUED)

  // Attempts
  attemptsMade  Int       @default(0)
  maxAttempts   Int       @default(3)
  lastAttemptAt DateTime?

  // Belongs to one OutboundCampaign
  outboundCampaignId String
  outboundCampaign   OutboundCampaign @relation(fields: [outboundCampaignId], references: [id], onDelete: Cascade)

  // Dynamic fields
  customFields Json?

  // Bookkeeping
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([status])
  @@index([phoneNumber])
  @@index([outboundCampaignId, status, createdAt])
  @@map("outbound_leads")
}

model KnowledgeBase {
  id                 String   @id @default(uuid())
  freeText           String?
  companyName        String?
  companyDescription String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  agentId            String   @unique

  agent     Agent                   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  documents KnowledgeBaseDocument[]
}

model KnowledgeBaseDocument {
  id              String   @id @default(uuid())
  title           String
  content         String
  tags            String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  knowledgeBaseId String

  knowledgeBase KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@index([knowledgeBaseId, createdAt])
}

model BookingSettings {
  id                  String   @id @default(uuid())
  appointmentSlot     Int      @default(15)
  allowSameDayBooking Boolean  @default(true)
  enableNotifications Boolean  @default(true)
  notificationEmails  String[]
  agentId             String   @unique
  timezone            String   @default("UTC")

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model CalendarConnection {
  id                   String           @id @default(uuid())
  provider             CalendarProvider
  accountEmail         String
  refreshToken         String?
  isPrimary            Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  accessToken          String?
  accessTokenExpiresAt DateTime?
  calendarId           String?
  userId               String

  agentAssignments AgentCalendarAssignment[]
  user             User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountEmail])
  @@index([userId, isPrimary])
}

model AgentCalendarAssignment {
  agentId              String
  calendarConnectionId String
  assignedAt           DateTime @default(now())

  agent              Agent              @relation(fields: [agentId], references: [id], onDelete: Cascade)
  calendarConnection CalendarConnection @relation(fields: [calendarConnectionId], references: [id], onDelete: Cascade)

  @@id([agentId, calendarConnectionId])
}

model WeeklyAvailability {
  id        String    @id @default(uuid())
  dayOfWeek DayOfWeek
  startTime String
  endTime   String
  agentId   String

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, dayOfWeek, startTime, endTime])
}

model Appointment {
  id        String            @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(PENDING)
  location  String?
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  agentId   String
  timezone  String            @default("UTC")

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, startTime])
}

model AppointmentLeadItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agentId     String

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, name])
  @@index([agentId, createdAt])
}

model LeadItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agentId     String

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, name])
}

model Lead {
  id        String     @id @default(uuid())
  status    LeadStatus @default(NEW)
  source    String?
  data      Json
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  agentId   String

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, status, createdAt])
}

model Conversation {
  id         String     @id @default(uuid())
  senderJid  String
  message    String
  senderType SenderType
  createdAt  DateTime   @default(now())
  agentId    String
  metadata   Json?

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, senderJid, createdAt])
}

model Email {
  id                String      @id @default(uuid())
  recipient         String
  subject           String
  body              String
  sentAt            DateTime    @default(now())
  agentId           String
  status            EmailStatus @default(SENT)
  clickedAt         DateTime?
  lastError         String?
  openedAt          DateTime?
  providerMessageId String?

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, sentAt])
  @@index([status])
}
